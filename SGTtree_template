#include <bits/stdc++.h>
using namespace std;
#define int long long
class SGTtree {
    vector<int> seg;
public:
    SGTtree(int n) {
        seg.resize(4 * n + 1, 1e9);
    }

    void build(int ind, int low, int high, vector<int>& arr) {
        if (low == high) {
            seg[ind] = arr[low];
            return;
        }
        int mid = low + (high - low) / 2;
        build(2 * ind + 1, low, mid, arr);
        build(2 * ind + 2, mid + 1, high, arr);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);// this is change according question
    }

    int query(int ind, int low, int high, int l, int r) {
        if (low > r || l > high) return 1e9;
        if (low >= l && high <= r) return seg[ind];
        int mid = low + (high - low) / 2;
        int left = query(2 * ind + 1, low, mid, l, r);
        int right = query(2 * ind + 2, mid + 1, high, l, r);
        return min(left, right);
    }

    void update(int ind, int low, int high, int pos, int val) {
        if (low == high) {
            seg[ind] = val;
            return;
        }
        int mid = low + (high - low) / 2;
        if (pos <= mid) update(2 * ind + 1, low, mid, pos, val);
        else update(2 * ind + 2, mid + 1, high, pos, val);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

void solve(){
    int n;
    cin>>n;
    vector<int>a(n);
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    SGTtree seg(n);
    seg.build(0,0,n-1,a);
    int q;
    cin>>q;
    while(q--){
        int t,l,r;
        cin>>t;
        if(t==1){
            cin>>l>>r;
            cout<<seg.query(0,0,n-1,l,r)<<endl;
        }
        else{
            int pos,val;
            cin>>pos>>val;
            seg.update(0,0,n-1,pos,val);
        }
        
    }
    return ;
}
signed main() {
	// your code goes here
    solve();
}
